from django.urls import reverse
from django.utils.crypto import get_random_string
from django.utils.text import slugify
from django.db import models
from django.contrib.auth.models import User
from datetime import date


# class Usuario(models.Model):
#     usuario = models.OneToOneField(
#         User, on_delete=models.CASCADE, related_name='perfil', unique=True)
#     # TODO alterar para required após desenvovimento
#     cpf = models.PositiveIntegerField()
#     telefone = models.PositiveIntegerField(null=True, default=None)

#     def __str__(self) -> str:
#         return self.usuario.get_full_name()


class Categoria(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    title = models.CharField(max_length=65)

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['title']


class InstituicaoFincanceira(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    title = models.CharField(max_length=65)

    class Meta:
        verbose_name = 'Instituição Financeira'
        verbose_name_plural = 'Instituições Financeiras'

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['title']


class Tipo(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    title = models.CharField(max_length=65)

    def __str__(self) -> str:
        return self.title

    class Meta:
        ordering = ['title']


class Modalidade(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    title = models.CharField(max_length=65)

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['title']


class Lancamento(models.Model):
    id = models.BigAutoField(primary_key=True, editable=False)  # ok
    titulo = models.CharField(max_length=65, verbose_name='Titulo')  # ok
    descricao = models.CharField(
        max_length=165, null=True, default=None, blank=True)  # ok
    valor_total = models.FloatField(verbose_name='Valor')  # ok
    slug = models.SlugField(unique=True)
    data_lancamento = models.DateField(
        null=True, default=date.today(), verbose_name='Data')  # ok
    data_criacao = models.DateTimeField(auto_now_add=True)
    compartilhado = models.BooleanField(default=False)
    fixo_mensal = models.BooleanField(default=False)
    quantidade_parcelas = models.PositiveIntegerField(
        default=1, verbose_name='Quantidade de parcelas')
    # valor_quitado = models.FloatField()
    id_categoria = models.ForeignKey(
        Categoria, on_delete=models.CASCADE, verbose_name='Categoria')
    id_instituicao_financeira = models.ForeignKey(
        InstituicaoFincanceira, on_delete=models.CASCADE, verbose_name='Instituição financeira')
    id_modalidade = models.ForeignKey(
        Modalidade, on_delete=models.CASCADE, verbose_name='Modalidade', default=1)
    id_tipo = models.ForeignKey(
        Tipo, on_delete=models.CASCADE, verbose_name='Tipo', default=2)
    id_usuario_ativo = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, related_name='users_to_usuario_ativo', verbose_name='Usuario ativo')
    id_usuario_titular = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, related_name='users_to_usuario_titular', verbose_name='Titular')

    class Meta:
        verbose_name = 'Lançamento'
        ordering = ['-data_lancamento']

    def __str__(self):
        return self.titulo

    def __set_slug(self):
        if not self.slug:
            slug = f'{slugify(self.titulo)}'
            slug_existente = Lancamento.objects.filter(slug=slug).first()
            if slug_existente is not None:
                slug += f'-{get_random_string(4)}'
            self.slug = slug

    def save(self, *args, **kwargs):
        self.__set_slug()
        # TODO VERIFICAR SE É MELHOR DEIXAR ASSIM OU CONFORME ENTRADA DO USUÁRIO
        self.titulo = self.titulo.capitalize()
        self.descricao = self.descricao.capitalize()

        return super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('lancamentos:detalhes', args=(self.id,))


class LancamentoBaixa(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    id_parcela = models.ForeignKey(Lancamento, on_delete=models.CASCADE)
    data = models.DateTimeField(auto_now_add=True)
    valor = models.FloatField()
    numero_parcela = models.PositiveIntegerField(default=1)

    class Meta:
        verbose_name = 'Lançamento Baixa'
        verbose_name_plural = 'Lançamentos Baixas'

    def __str__(self):
        return self.id


class Parcela(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    id_lancamento = models.ForeignKey(Lancamento, on_delete=models.CASCADE)
    numero_parcela = models.PositiveIntegerField()
    valor_parcela = models.FloatField()
    data_vencimento = models.DateField()


    bank account admin

    from django.contrib import admin
from . import models


@admin.register(models.BankAccountModel)
class BankAccountAdmin(admin.ModelAdmin):
    list_display = 'id', 'title', 'id_titular_user'
    list_filter = ['id', 'title', 'id_titular_user']
    search_fields = ['id', 'title', 'id_titular_user']
    list_editable = ['title', 'id_titular_user']
    empty_value_display = 'Vazio'
    list_per_page = 20


@admin.register(models.CardModel)
class CardAdmin(admin.ModelAdmin):
    list_display = 'id', 'id_bank_account', 'card_number', 'payment_day', 'titular_user',
    list_filter = ['id', 'id_bank_account', 'card_number', 'payment_day',]
    search_fields = ['id', 'id_bank_account', 'card_number', 'payment_day',]
    list_editable = ['id_bank_account',]
    empty_value_display = 'Vazio'
    list_per_page = 20

    # adicionando campos extras de classes de foreign keys
    def titular_user(self, obj):
        return obj.id_bank_account.id_titular_user


        lancamentos admin
        from django.contrib import admin
from . import models

# Register your models here.


@admin.register(models.Entry)
class EntryAdmin(admin.ModelAdmin):
    list_display = 'id', 'entry_date', 'title',  'description', 'installments_number',  'value', 'id_category', 'id_card', 'id_modality', 'id_type', 'shared', 'fixed', 'id_titular_user', 'id_active_user', 'slug'
    list_filter = ['entry_date', 'shared',
                   'installments_number', 'description', 'id_category', 'id_modality']
    search_fields = ['title', 'description',]
    date_hierarchy = 'entry_date'
    list_editable = ['entry_date', 'title',  'description', 'value',
                     'shared', 'fixed', 'installments_number', 'id_titular_user', 'id_active_user']
    empty_value_display = 'vazio'
    list_per_page = 20
    # Preenche o slug automaticamente
    prepopulated_fields = {'slug': ['title']}
    radio_fields = {'id_modality': admin.HORIZONTAL,
                    'id_type': admin.HORIZONTAL, }
    # permite adicionar um input de pesquisa que se auto-completa. Necessário definir na classe do atributos os search_fields que serão utilizados para auto-completar a digitação
    # autocomplete_fields = ['id_card'] TODO VOLTAR ESSE CAMPO URGENTE
    # fields = [('title',  'description',), ('compartilhado', 'fixed')] # os campos que serão exibidos ao clicar no item. A organização em tuplas significa que os itens serão alinhados na mesma linha
    # fieldsets = [  # parte de adicionar ou editar itens
    #     (
    #         'Características',
    #         {
    #             "fields": ['data_lancamento', 'title',  'description', 'value', 'installment_number'],
    #         },
    #     ),
    #     (
    #         "Boolean",
    #         {
    #             "fields": [('compartilhado', 'fixo_mensal')],
    #         },
    #     ),
    #     (
    #         "Usuários",
    #         {
    #             "classes": ["collapse"],
    #             "fields": ['id_usuario_titular', 'id_usuario_ativo'],
    #         },
    #     ),
    # ]


@admin.register(models.LancamentoBaixa)
class LancamentoAdmin(admin.ModelAdmin):
    list_display = 'id', 'id_parcela', 'data', 'valor', 'numero_parcela',


@admin.register(models.Modalidade)
class ModalidadeAdmin(admin.ModelAdmin):
    list_display = 'id', 'title',


@admin.register(models.Categoria)
class CategoriaAdmin(admin.ModelAdmin):
    list_display = 'id', 'title',


@admin.register(models.Tipo)
class TipoAdmin(admin.ModelAdmin):
    list_display = 'id', 'title',


# @admin.register(models.InstituicaoFincanceira)
# class InstituicaoFincanceiraAdmin(admin.ModelAdmin):
#     list_display = 'id', 'title',
#     search_fields = ['title']


# admin.site.register(models.Usuario)
admin.site.register(models.Parcela)

# @admin.register(models.Categoria)
# class CategoriaAdmin(admin.ModelAdmin):
#     ...


# @admin.register(models.InstituicaoFincanceira)
# class InstituicaoAdmin(admin.ModelAdmin):
#     ...

# @admin.register(models.Tipo)
# class TipoAdmin:
#     ...

lancamento models
from django.urls import reverse
from django.utils.crypto import get_random_string
from django.utils.text import slugify
from django.db import models
from django.contrib.auth.models import User
from datetime import date
from bank_account.models import CardModel

# class Usuario(models.Model):
#     usuario = models.OneToOneField(
#         User, on_delete=models.CASCADE, related_name='perfil', unique=True)
#     # TODO alterar para required após desenvovimento
#     cpf = models.PositiveIntegerField()
#     telefone = models.PositiveIntegerField(null=True, default=None)

#     def __str__(self) -> str:
#         return self.usuario.get_full_name()


class Categoria(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    title = models.CharField(max_length=65)

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['title']


# class InstituicaoFincanceira(models.Model):
#     id = models.AutoField(primary_key=True, editable=False)
#     title = models.CharField(max_length=65)

#     class Meta:
#         verbose_name = 'Instituição Financeira'
#         verbose_name_plural = 'Instituições Financeiras'

#     def __str__(self):
#         return self.title

#     class Meta:
#         ordering = ['title']


class Tipo(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    title = models.CharField(max_length=65)

    def __str__(self) -> str:
        return self.title

    class Meta:
        ordering = ['title']


class Modalidade(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    title = models.CharField(max_length=65)

    def __str__(self):
        return self.title

    class Meta:
        ordering = ['title']


class Entry(models.Model):
    id = models.BigAutoField(primary_key=True, editable=False)  # ok
    title = models.CharField(max_length=65, verbose_name='Titulo')  # ok
    description = models.CharField(
        max_length=165, null=True, default=None, blank=True)  # ok
    value = models.FloatField(verbose_name='Valor')  # ok
    slug = models.SlugField(unique=True)
    entry_date = models.DateField(
        null=True, default=date.today(), verbose_name='Data')  # ok
    created_at = models.DateTimeField(auto_now_add=True)
    shared = models.BooleanField(default=False)
    fixed = models.BooleanField(default=False)
    installments_number = models.PositiveIntegerField(
        default=1, verbose_name='Quantidade de parcelas')
    # valor_quitado = models.FloatField()
    id_category = models.ForeignKey(
        Categoria, on_delete=models.CASCADE, verbose_name='Categoria')
    id_card = models.CharField(max_length=65, verbose_name='Titulo')
    # id_card = models.ForeignKey(
    #     CardModel, on_delete=models.CASCADE, verbose_name='Cartao')
    id_modality = models.ForeignKey(
        Modalidade, on_delete=models.CASCADE, verbose_name='Modalidade', default=1)
    id_type = models.ForeignKey(
        Tipo, on_delete=models.CASCADE, verbose_name='Tipo', default=2)
    id_active_user = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, related_name='users_to_usuario_ativo', verbose_name='Usuario ativo')
    id_titular_user = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, related_name='users_to_usuario_titular', verbose_name='Titular')

    class Meta:
        verbose_name = 'Lançamento'
        ordering = ['-entry_date']

    def __str__(self):
        return self.title

    def __set_slug(self):
        if not self.slug:
            slug = f'{slugify(self.title)}'
            exist_slug = Entry.objects.filter(slug=slug).first()
            if exist_slug is not None:
                slug += f'-{get_random_string(4)}'
            self.slug = slug

    def save(self, *args, **kwargs):
        self.__set_slug()
        # TODO VERIFICAR SE É MELHOR DEIXAR ASSIM OU CONFORME ENTRADA DO USUÁRIO
        self.title = self.title.capitalize()
        self.description = self.description.capitalize()

        return super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('lancamentos:detalhes', args=(self.id,))


class LancamentoBaixa(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    id_parcela = models.ForeignKey(Entry, on_delete=models.CASCADE)
    data = models.DateTimeField(auto_now_add=True)
    valor = models.FloatField()
    numero_parcela = models.PositiveIntegerField(default=1)

    class Meta:
        verbose_name = 'Lançamento Baixa'
        verbose_name_plural = 'Lançamentos Baixas'

    def __str__(self):
        return self.id


class Parcela(models.Model):
    id = models.AutoField(primary_key=True, editable=False)
    id_lancamento = models.ForeignKey(Entry, on_delete=models.CASCADE)
    numero_parcela = models.PositiveIntegerField()
    valor_parcela = models.FloatField()
    data_vencimento = models.DateField()


    Traceback (most recent call last):
  File "C:\Developer\sistema_financeiro\manage.py", line 22, in <module>
    main()
  File "C:\Developer\sistema_financeiro\manage.py", line 18, in main
    execute_from_command_line(sys.argv)
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\core\management\__init__.py", line 442, in execute_from_command_line
    utility.execute()
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\core\management\__init__.py", line 436, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\core\management\base.py", line 413, in run_from_argv
    self.execute(*args, **cmd_options)
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\core\management\base.py", line 454, in execute
    self.check()
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\core\management\base.py", line 486, in check
    all_issues = checks.run_checks(
                 ^^^^^^^^^^^^^^^^^^
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\core\checks\registry.py", line 88, in run_checks
    new_errors = check(app_configs=app_configs, databases=databases)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\core\checks\urls.py", line 136, in check_custom_error_handlers
    handler = resolver.resolve_error_handler(status_code)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\urls\resolvers.py", line 732, in resolve_error_handler
    callback = getattr(self.urlconf_module, "handler%s" % view_type, None)
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\utils\functional.py", line 47, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
                                         ^^^^^^^^^^^^^^^^^^^
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\urls\resolvers.py", line 711, in urlconf_module
    return import_module(self.urlconf_name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\T-GAMER\AppData\Local\Programs\Python\Python311\Lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap>", line 1204, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1176, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1147, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 690, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 940, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "C:\Developer\sistema_financeiro\project\urls.py", line 21, in <module>
    path('', include('lancamentos.urls')),
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Developer\sistema_financeiro\venv\Lib\site-packages\django\urls\conf.py", line 39, in include    
    urlconf_module = import_module(urlconf_module)    
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    
  File "C:\Users\T-GAMER\AppData\Local\Programs\Python\Python311\Lib\importlib\__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap>", line 1204, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1176, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1147, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 690, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 940, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "C:\Developer\sistema_financeiro\lancamentos\urls.py", line 2, in <module>
    from lancamentos import views
  File "C:\Developer\sistema_financeiro\lancamentos\views\__init__.py", line 1, in <module>
    from .func_views import *
  File "C:\Developer\sistema_financeiro\lancamentos\views\func_views.py", line 7, in <module>
    from lancamentos.forms.lancamento_form import LancamentoForm
  File "C:\Developer\sistema_financeiro\lancamentos\forms\lancamento_form.py", line 7, in <module>
    class LancamentoForm(forms.ModelForm):
  File "C:\Developer\sistema_financeiro\lancamentos\forms\lancamento_form.py", line 19, in LancamentoForm   
    class Meta:
  File "C:\Developer\sistema_financeiro\lancamentos\forms\lancamento_form.py", line 20, in Meta
    model = Entry
            ^^^^^
NameError: name 'Entry' is not defined